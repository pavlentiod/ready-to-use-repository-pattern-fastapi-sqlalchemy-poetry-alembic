import asyncio
import datetime
from typing import List

from fastapi import HTTPException
from pydantic import UUID4
from sqlalchemy.ext.asyncio import AsyncSession

from database import db_helper
from repositories.{entity}.{entity}_repository import {Entity}Repository
from schemas.{entity}.{entity}_schema import {Entity}Input, {Entity}Output, {Entity}Endpoint


class {Entity}Service:
    """
    Service class for handling {Entity}s.
    """

    def __init__(self, session: AsyncSession):
        self.repository = {Entity}Repository(session)

    async def create(self, data: {Entity}Endpoint) -> {Entity}Output:
        entity_output = await self.repository.create(data)
        return entity_output

    async def get_all(self) -> List[{Entity}Output]:
        return await self.repository.get_all()

    async def get_{entity}(self, _id: UUID4) -> {Entity}Output:
        entity = await self.repository.get_by_id(_id)
        if not entity:
            raise HTTPException(status_code=404, detail="{Entity} not found")
        return entity

    async def update(self, _id: UUID4, data: {Entity}Input) -> {Entity}Output:
        entity = await self.repository.get_by_id(_id)
        if not entity:
            raise HTTPException(status_code=404, detail="{Entity} not found")
        updated_entity = await self.repository.update(entity, data)
        return updated_entity

    async def delete(self, _id: UUID4) -> bool:
        entity = await self.repository.get_by_id(_id)
        if not entity:
            raise HTTPException(status_code=404, detail="{Entity} not found")
        return await self.repository.delete(entity)


async def main():
    async with db_helper.session_factory() as session:
        pass

if __name__ == "__main__":
    asyncio.run(main())
