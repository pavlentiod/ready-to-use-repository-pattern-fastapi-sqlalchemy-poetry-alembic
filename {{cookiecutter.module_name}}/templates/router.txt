from fastapi import APIRouter, Depends, status
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
from pydantic import UUID4

from src.database import db_helper
from src.services.{entity}.{entity}_service import {Entity}Service
from src.schemas.{entity}.{entity}_schema import {Entity}Input, {Entity}Output

router = APIRouter()

@router.post("", status_code=status.HTTP_201_CREATED, response_model={Entity}Output)
async def create_{entity}(
        data: {Entity}Input,
        session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    _service = {Entity}Service(session)
    return await _service.create(data)

@router.get("", status_code=status.HTTP_200_OK, response_model=List[{Entity}Output])
async def get_{entity}s(session: AsyncSession = Depends(db_helper.scoped_session_dependency)) -> List[{Entity}Output]:
    _service = {Entity}Service(session)
    return await _service.get_all()

@router.get("/{{_id}}", status_code=status.HTTP_200_OK, response_model={Entity}Output)
async def get_{entity}(
        _id: UUID4,
        session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    _service = {Entity}Service(session)
    return await _service.get_{entity}(_id)

@router.put("/{{_id}}", status_code=status.HTTP_200_OK, response_model={Entity}Output)
async def update_{entity}(
        _id: UUID4,
        data: {Entity}Input,
        session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    _service = {Entity}Service(session)
    return await _service.update(_id, data)

@router.delete("/{{_id}}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_{entity}(
        _id: UUID4,
        session: AsyncSession = Depends(db_helper.scoped_session_dependency),
):
    _service = {Entity}Service(session)
    await _service.delete(_id)
    return {{"detail": "{entity} deleted successfully"}}